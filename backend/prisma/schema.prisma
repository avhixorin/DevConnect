generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(uuid())
  username    String    @unique
  email       String    @unique
  dateOfBirth DateTime?
  displayName String?
  bio         String?
  gender      String?
  password    String
  isAdmin     Boolean   @default(false)
  avatar      String?
  createdAt   DateTime  @default(now())
  isDeleted   Boolean   @default(false) 

  messages         Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")

  posts      Post[]
  comments   Comment[]
  likes      Like[]

  notifications Notification[]

  followers  Follow[] @relation("followers")
  following  Follow[] @relation("following")

  settings   UserSettings?
  blockedBy  UserSettings[] @relation("BlockedUsers")

  @@index([email])
  @@index([username])
}

model Post {
  id         String   @id @default(uuid())
  title      String
  content    String
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId   String
  likes      Like[]
  comments   Comment[]
  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?
  createdAt  DateTime @default(now())
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  createdAt DateTime @default(now())
}

model Like {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  post   Post   @relation(fields: [postId], references: [id])
  postId String
}

model Category {
  id    String  @id @default(uuid())
  name  String  @unique
  posts Post[]
}

model Follow {
  id          String @id @default(uuid())
  follower    User   @relation("followers", fields: [followerId], references: [id])
  followerId  String
  following   User   @relation("following", fields: [followingId], references: [id])
  followingId String
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId]) 
}

model Message {
  id         String @id @default(uuid())
  content    String
  author     User   @relation("SentMessages", fields: [authorId], references: [id])
  authorId   String
  receiver   User   @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId String
  createdAt  DateTime @default(now())
}

model UserSettings {
  id                String @id @default(uuid())
  user              User   @relation(fields: [userId], references: [id])
  userId            String @unique
  theme             String
  language          String
  private           Boolean?
  notifications     Boolean?
  pushNotifications Boolean?
  emailNotifications Boolean?

  blockedUsers      User[] @relation("BlockedUsers")

  createdAt DateTime @default(now())
}

model Notification {
  id        String @id @default(uuid())
  user      User   @relation(fields: [userId], references: [id])
  userId    String
  message   String
  read      Boolean @default(false)
  createdAt DateTime @default(now())
}
